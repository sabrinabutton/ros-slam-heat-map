#!/usr/bin/env python

""" @package docstring
    @author Sabrina Button
    @date March 2023
    @description Makes a heat map file when called 
"""
import rospy
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from std_msgs.msg import Int32MultiArray  # map created via LiDAR data

heat_grid = None
room_mask = None


def set_heat_grid(grid):
    global heat_grid
    heat_grid = grid.data
    rospy.loginfo(
        "Got a grid (sent from heat_map_printer node)! It looks like this:")
    generate_heat_map(heat_grid)


def set_mask(mask):
    global room_mask
    room_mask = mask.data
    rospy.loginfo(
        "Got a mask (sent from mask_generator node)! It looks like this:")
    rospy.loginfo(room_mask)


def generate_heat_map(heat_map, mask):  # generates a heat map
    heat_map = np.array(heat_map)
    room_layout = np.array(mask)

    # Define the plot
    fig, ax = plt.subplots(figsize=(15, 15))

    # Add title to the Heat map
    title = "BMH 109 CO2 Concentration Map"

    # # Set the font size and the distance of the title from the plot
    plt.title(title, fontsize=18)
    ttl = ax.title
    ttl.set_position([0.5, 1.05])
    result = heat_map.pivot(index='Yrows', columns='Xcols', values='Change')

    g = sns.heatmap(heat_map, mask=room_layout, cmap='RdYlGn_r', square=True)
    g.set_facecolor('xkcd:black')  # this makes the mask black

    # generate a random file name
    filename = file_name_gen()
    plt.savefig('~/home/pi7/heat_maps/$filename.png')  # save the heatmap

    plt.savefig('~/home/pi7/heat_maps/' +
                filename + '.png')  # save the heatmap


def file_name_gen():
    import random
    import string
    letters = string.ascii_lowercase
    result_str = ''.join(random.choice(letters) for i in range(10))
    return result_str


def heat_map_listener():
    rospy.init_node('heat_map_printer', anonymous=False)
    rospy.Subscriber('heat_map_sender', Int32MultiArray,
                     confirm_map)  # gets occupancy grid
    rospy.Subscriber('mask_publisher', Int32MultiArray, )


if __name__ == '__main__':
    try:
        while heat_grid == None or room_mask == None:
            heat_map_listener()

        generate_heat_map(heat_grid, room_mask)

    except rospy.ROSInterruptException:
        pass
