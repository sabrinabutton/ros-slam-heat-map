#!/usr/bin/env python

""" @package docstring
    @author Sabrina Button
    @date March 2023
    @description Makes a heat map file (png) when called 
"""
import rospy
import os
import numpy as np
import pandas as pd
import seaborn as sns
import scipy
from scipy import ndimage
import matplotlib.pyplot as plt
from std_msgs.msg import Int32MultiArray  # map created via LiDAR data

heat_grid = None
room_mask = None


def set_heat_grid(grid):
    global heat_grid
    global room_mask
    grid = np.array(grid.data)

    grid = grid.reshape(np.sqrt(len(grid.data)), np.sqrt(len(grid.data)))
    heat_grid = grid
    rospy.loginfo(
        "Got a grid (sent from heat_map_generator node)!")

    # if we have both the heat grid and the room mask
    if type(heat_grid) != type(None) and type(room_mask) != type(None):
        generate_heat_map(heat_grid, room_mask)  # generate the heat map


def set_mask(mask):
    global room_mask
    mask = np.array(mask.data)

    # reshape one dimensional tuple to a 2D matrix
    mask = mask.reshape(np.sqrt(len(mask.data)), np.sqrt(len(mask.data)))
    room_mask = mask
    rospy.loginfo(
        "Got a mask (sent from mask_generator node)! ")


def apply_filter(img_, fltr, repeats=1):
    img_filter = img_  # copy the image so we don't modify the original

    for i in range(0, repeats):  # apply the filter multiple times to blur the image further
        img_filter = ndimage.convolve(
            img_filter, fltr, mode='constant', cval=0.0)  # apply the filter via convolution of a passed kernel

    return img_filter


def generate_heat_map(heat_map, mask):  # generates a heat map
    heat_map = np.array(heat_map)
    room_layout = np.array(mask)

    # crop to where the building exists
    coords = np.argwhere(room_layout == True)
    x_min, y_min = coords.min(axis=0)
    x_max, y_max = coords.max(axis=0)
    room_layout = room_layout[x_min:x_max+1, y_min:y_max+1]
    heat_map = heat_map[x_min:x_max+1, y_min:y_max+1]

    # This is a Kernel that will be used to blur the heat map
    k = np.array([[1, 2, 1], [2, 4, 2], [1, 2, 1]])/16
    # apply a gaussian blur to the heat map via convolution
    heat_map = apply_filter(heat_map, k, repeats=40)

    # Define the plot
    fig, ax = plt.subplots(figsize=(15, 15))

    # Add title to the Heat map
    title = "Room CO2 Concentration Map"

    # Set the font size and the distance of the title from the plot
    plt.title(title, fontsize=18)
    ttl = ax.title
    ttl.set_position([0.5, 1.05])

    g = sns.heatmap(heat_map, mask=room_layout, cmap='RdYlGn_r',
                    square=True)  # make the heatmap using seaborn
    g.set_facecolor('xkcd:black')  # this makes the mask black

    # generate a random file name
    filename = file_name_gen()

    plt.savefig('/home/pi7/heat_maps/' +
                filename + '.png')  # save the heatmap

    # Log info so we know it worked and what the file name is
    rospy.loginfo("Saved a new heat map as " + filename + ".png!")
    rospy.loginfo("Bye bye. Run me again for another heat map!")

    # kill this node (we only want one heat map)
    os.system("rosnode kill heat_map_printer")


def file_name_gen():
    # Creates a random file name for the heat map as a string
    import random
    import string
    letters = string.ascii_lowercase
    result_str = ''.join(random.choice(letters) for i in range(10))
    return result_str


def heat_map_listener():
    rospy.init_node('heat_map_printer', anonymous=False)  # creates a node
    rospy.Subscriber('heat_map_sender', Int32MultiArray,
                     set_heat_grid)  # gets occupancy grid
    rospy.Subscriber('mask_publisher', Int32MultiArray, set_mask)  # gets mask


if __name__ == '__main__':
    try:
        heat_map_listener()
        rospy.spin()  # keeps the node alive
    except rospy.ROSInterruptException:
        pass
