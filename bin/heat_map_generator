#!/usr/bin/env python

""" @package docstring
    @author Sabrina Button
    @date March 2023
    @description Build a CO2 concentration heat map grid based on CO2 data and robot pose
"""
import rospy
import numpy as np
from std_msgs.msg import Int16
from std_msgs.msg import Int32MultiArray  # map created via LiDAR data
from geometry_msgs.msg import PoseStamped  # robot pose
from nav_msgs.msg import OccupancyGrid

current_x = None
current_y = None
zeros_grid = None
ppm = None


def set_map(grid):  # this should only ever run once to get the shape of the occupancy grid
    global raw_grid
    grid_shape = np.array(grid.data)  # creates a grid of zeros
    raw_grid = np.zeros_like(grid_shape)


def set_pose(pose_obj):
    global current_x
    global current_y
    current_x = pose_obj.pose.position.x
    current_y = pose_obj.pose.position.y


def set_co2(co2):
    global ppm
    ppm = co2.data


def post_to_map(heat_map, x, y, ppm):
    # write to the current coordinate
    x = int(x)
    y = int(y)
    # make a 9 by 9 circle around the current coordinate
    for i in range(-4, 5):
        for j in range(-4, 5):
            if (i**2 + j**2) <= 16:
                heat_map[x + i][y + j] = ppm
    rospy.loginfo(
        "Published a heat map grid from heat_map_generator node! It looks like this:")
    pub = rospy.Publisher('heat_map_sender', Int32MultiArray, queue_size=1)
    pub.publish(data=heat_map)
    rospy.loginfo(heat_map)


def map_listener():
    global raw_grid

    rospy.init_node('heat_map_generator', anonymous=False)

    if raw_grid == None:
        # gets occupancy grid
        rospy.Subscriber('map', OccupancyGrid, set_map)
    # subscribes this node to sgp30 data to get the CO2 ppm
    rospy.Subscriber('sgp30_data', Int16, set_co2)
    # gets robot pose without covariance
    rospy.Subscriber('slam_out_pose', PoseStamped, set_pose)

    rate = rospy.Rate(10)


if __name__ == '__main__':
    try:
        map_listener()
        if raw_grid != None:
            post_to_map(raw_grid, current_x, current_y, ppm)  # update map

        rospy.spin()

    except rospy.ROSInterruptException:
        pass
