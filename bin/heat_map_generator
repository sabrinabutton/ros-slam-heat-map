#!/usr/bin/env python

""" @package docstring
    @author Sabrina Button
    @date March 2023
    @description Get CO2 data and current robot pose and publish it
"""
import rospy

from std_msgs.msg import Int16
from nav_msgs.msg import OccupancyGrid  # map created via LiDAR data
from geometry_msgs.msg import PoseStamped  # robot pose

current_x = None
current_y = None
raw_grid = None
ppm = None


def set_map(grid):
    if raw_grid == None:
        raw_grid = np.array(grid)  # convert to numpy array


def set_pose(pose):

    current_x = pose.position.x
    current_y = pose.position.y


# map is a 2048 array
def post_to_map(heat_map, x, y, ppm):
    # write to the current coordinate
    x = int(x)
    y = int(y)
    heat_map[x][y] = ppm
    pub.publish(heat_map)
    rospy.loginfo(heat_map)


def map_listener():
    rospy.init_node('heat_map_generator', anonymous=False)

    # send previous heat map
    rospy.Publisher('heat_map_sender', OccupancyGrid)

    rospy.Subscriber('map', OccupancyGrid, set_map)  # gets occupancy grid
    # subscribes this node to sgp30 data to get the CO2 ppm
    rospy.Subscriber('sgp30_data', Int16, set_co2)
    # gets robot pose without covariance
    rospy.Subscriber('slam_out_pose', PoseStamped, set_pose)

    rate = rospy.Rate(10)


if __name__ == '__main__':
    try:

        map_listener()
        post_to_map(raw_grid, current_x, current_y, ppm)  # update map
        rospy.spin()

    except rospy.ROSInterruptException:
        pass
